"""1. Getting Started with FCN Pre-trained Models
==============================================

This is a quick demo of using GluonCV FCN model on PASCAL VOC dataset.
Please follow the `installation guide <../index.html>`_ to install MXNet and GluonCV if not yet.
"""
import mxnet as mx
from mxnet import image
from PIL import Image
from mxnet.gluon.data.vision import transforms

import gluoncv
import numpy as np
import os
import makeImage
import fcn_methods
# using cpu
ctx = mx.gpu()

# load the image
path = 'test/makeNew/'
filename = '747_496_L_B_0_modify.jpg'
pathdir = "C:\\Users\\com\\PycharmProjects\\untitled\\test\\newTest"
filelist = os.listdir(pathdir)

model = gluoncv.model_zoo.get_fcn(dataset='pascal_voc', backbone='resnet50', pretrained=False)
model2 = gluoncv.model_zoo.get_fcn(dataset='pascal_voc', backbone='resnet50', pretrained=False)

#if os.path.isfile(args.resume):
directory = "runs/pascal_voc/checkpoint_190725.params"
dir_50_330 = "runs/pascal_voc/checkpoint_resnet50_0.001_20_0.9_e=100_d_5_290aug2.params"
dir_food = "runs/pascal_voc/checkpoint_resnet50_0.001_20_0.9_e=100_d_5_food.params"


model.load_parameters(dir_50_330, ctx = ctx)
model2.load_parameters(dir_food, ctx = ctx)

def modelPredict(name):
    if ".jpg" in name:
        img = image.imread(pathdir + '\\' + name)
        img = image.imresize(img, 1280, 720)

        from matplotlib import pyplot as plt
        # plt.imshow(img.asnumpy())
        # plt.show()

        ##############################################################################
        # normalize the image using dataset mean
        transform_fn = transforms.Compose([
            transforms.ToTensor(),
            transforms.Normalize([.485, .456, .406], [.229, .224, .225])
        ])
        img = transform_fn(img)
        img = img.expand_dims(0).as_in_context(ctx)

        ##############################################################################
        # Load the pre-trained model and make prediction
        # ----------------------------------------------
        #
        # get pre-trained model

        ##############################################################################
        # make prediction using single scale
        output = model.demo(img)
        output2 = model2.demo(img)
        allMenuPath = "C:\\Users\\com\\PycharmProjects\\untitled\\test\\newTest\\class_names.txt"
        allMenu = open(allMenuPath, 'r')
        MenuPath = "C:\\Users\\com\\PycharmProjects\\untitled\\test\\newTest\\menu.txt"
        sMenu = open(MenuPath, 'r')
        menu, all, newcnt = fcn_methods.get_menus(allMenuPath, MenuPath)

        ############################################insert menu
        ######################################################################################
        menu2 = [0, 1, 2, 3]  ##########식판, 수저, food
        threshold = 0.9
        orig = fcn_methods.get_menuTF(output, menu, threshold)
        orig2 = fcn_methods.get_menuTF(output2, menu2, threshold)
        ######################################################모델 클래스별 TF 들어있는 arr
        if newcnt > 0:
            fcn_methods.makeData(orig, orig2, name, menu, all)  ###############g학습용 데이터 만들기

        ####################################################################################################
        orig = mx.nd.array(orig)
        orig2 = mx.nd.array(orig2)

        predict = mx.nd.squeeze(mx.nd.argmax(orig, 1)).asnumpy()
        predict2 = mx.nd.squeeze(mx.nd.argmax(orig2, 1)).asnumpy()
        ##############################################################################
        # Add color pallete for visualization
        from gluoncv.utils.viz import get_color_pallete
        import matplotlib.image as mpimg
        mask = get_color_pallete(predict, 'pascal_voc')
        mask2 = get_color_pallete(predict2, 'pascal_voc')

        mask.save('output.png')
        mask2.save('output2.png')

        ##############################################################################
        # show the predicted mask
        mmask = mpimg.imread('output.png')
        mmask2 = mpimg.imread('output2.png')
        #plt.imshow(mmask)
        #plt.show()
        #plt.imshow(mmask2)
        #plt.show()

import time
from watchdogs.observers import Observer
from watchdogs.events import FileSystemEventHandler

class EventHandler(FileSystemEventHandler):
    def on_any_event(self, event):
        print("EVENT")
        print(event.event_type)
        print(event.src_path)
        if event.event_type == 'created' and '.jpg' in event.src_path:
            modelPredict(event.src_path.replace(path+"\\", ""))
        print()

if __name__ == "__main__":
    path = "C:\\Users\\com\\PycharmProjects\\untitled\\test\\newTest"

    event_handler = EventHandler()
    observer = Observer()
    observer.schedule(event_handler, path, recursive = True)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()



'''
for name in filelist:
    if ".jpg" in name:
        img = image.imread(pathdir+'\\'+name)
        img = image.imresize(img,1280,720)

        from matplotlib import pyplot as plt
        #plt.imshow(img.asnumpy())
        #plt.show()

##############################################################################
# normalize the image using dataset mean
        transform_fn = transforms.Compose([
            transforms.ToTensor(),
            transforms.Normalize([.485, .456, .406], [.229, .224, .225])
        ])
        img = transform_fn(img)
        img = img.expand_dims(0).as_in_context(ctx)


##############################################################################
# Load the pre-trained model and make prediction
# ----------------------------------------------
#
# get pre-trained model


##############################################################################
# make prediction using single scale
        output = model.demo(img)
        output2 = model2.demo(img)
        allMenuPath = "C:\\Users\\com\\PycharmProjects\\untitled\\test\\newTest\\class_names.txt"
        allMenu = open(allMenuPath, 'r')
        MenuPath = "C:\\Users\\com\\PycharmProjects\\untitled\\test\\newTest\\menu.txt"
        sMenu = open(MenuPath, 'r')
        menu,all, newcnt = fcn_methods.get_menus(allMenuPath, MenuPath)


############################################insert menu
######################################################################################
        menu2 = [0,1,2,3]##########식판, 수저, food
        threshold = 0.9
        orig = fcn_methods.get_menuTF(output, menu, threshold)
        orig2 = fcn_methods.get_menuTF(output2, menu2, threshold)
######################################################모델 클래스별 TF 들어있는 arr
        if newcnt>0:
            fcn_methods.makeData(orig, orig2, name, menu, all)###############g학습용 데이터 만들기


####################################################################################################
        orig = mx.nd.array(orig)
        orig2 = mx.nd.array(orig2)

        predict = mx.nd.squeeze(mx.nd.argmax(orig, 1)).asnumpy()
        predict2 = mx.nd.squeeze(mx.nd.argmax(orig2, 1)).asnumpy()
##############################################################################
# Add color pallete for visualization
        from gluoncv.utils.viz import get_color_pallete
        import matplotlib.image as mpimg
        mask = get_color_pallete(predict, 'pascal_voc')
        mask2 = get_color_pallete(predict2, 'pascal_voc')

        mask.save('output.png')
        mask2.save('output2.png')


##############################################################################
# show the predicted mask
        mmask = mpimg.imread('output.png')
        mmask2 = mpimg.imread('output2.png')

#mmask2 = mpimg.imread('output2.png')######
        #plt.imshow(mmask)
        #plt.show()
        #plt.imshow(mmask2)
        #plt.show()
'''
