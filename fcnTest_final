"""1. Getting Started with FCN Pre-trained Models
==============================================

This is a quick demo of using GluonCV FCN model on PASCAL VOC dataset.
Please follow the `installation guide <../index.html>`_ to install MXNet and GluonCV if not yet.
"""
##########################필수#############################
###############파일 형식은 jpg로
import mxnet as mx
from mxnet import image
from PIL import Image
from mxnet.gluon.data.vision import transforms

import gluoncv
import numpy as np
import os
import fcn_methods
import cv2
# using cpu
ctx = mx.gpu()

# load the image
#path = 'test/makeNew/'
#filename = '747_496_L_B_0_modify.jpg'
##########################필수#############################
############테스트할 사진이 들어있는 폴더 경로
pathdir = "C:\\Users\\com\\PycharmProjects\\untitled\\test\\auto_test\\newTest"
filelist = os.listdir(pathdir)

##########################필수#############################
# C:\Users\com\new\envs\cuda\Lib\site-packages\gluoncv\data\pascal_voc\segmentation.py 에서
# NUM_CLASS를 학습시킬때와 동일하게 맞춰주어야함
model = gluoncv.model_zoo.get_fcn(dataset='pascal_voc', backbone='resnet50', pretrained=False)
model2 = gluoncv.model_zoo.get_fcn(dataset='pascal_voc', backbone='resnet50', pretrained=False)

#if os.path.isfile(args.resume):
##########################필수#############################
#############학습된 모델 파라미터 경로
directory = "runs/pascal_voc/checkpoint_190725.params"
dir_50_330 = "runs/pascal_voc/checkpoint_resnet50_0.001_20_0.9_e=100_d_5_290aug2.params"
dir_50_530 = "runs/pascal_voc/checkpoint_resnet50_0.001_20_0.9_d_5_530aug_e=0.params"
dir_food = "runs/pascal_voc/checkpoint_resnet50_0.001_20_0.9_e=100_d_5_food.params"


model.load_parameters(dir_50_530, ctx = ctx)
model2.load_parameters(dir_50_530, ctx = ctx)

##########################################################################
###### jpg파일에 대한 predict
def modelPredict(name, pathdir):
    if ".jpg" in name:

        img = image.imread(pathdir + '\\' + name)
        ##########################필수#############################
        ##########파일 해상도 변경이 필요할 때
        img = image.imresize(img, 1280, 720)
        import copy
        imgsave = copy.deepcopy(img)

        from matplotlib import pyplot as plt
        # plt.imshow(img.asnumpy())
        # plt.show()

        ##############################################################################
        # normalize the image using dataset mean
        transform_fn = transforms.Compose([
            transforms.ToTensor(),
            transforms.Normalize([.485, .456, .406], [.229, .224, .225])
        ])
        img = transform_fn(img)
        img = img.expand_dims(0).as_in_context(ctx)

        ##############################################################################
        # Load the pre-trained model and make prediction
        # ----------------------------------------------
        #
        # get pre-trained model

        ##############################################################################
        # make prediction using single scale
        output = model.demo(img)
        output2 = model2.demo(img)
        ##########################필수#############################
        #######학습된 전체 클래스가 적힌 경로와 테스트할 식단이 적힌 클래스에 대한 경로
        #######메뉴들 다 입력한 후 마지막에 엔터 한 번씩 필수
        allMenuPath = "C:\\Users\\com\\PycharmProjects\\untitled\\test\\auto_test\\newTest\\class_names.txt"
        #allMenu = open(allMenuPath, 'r')
        MenuPath = "C:\\Users\\com\\PycharmProjects\\untitled\\test\\auto_test\\newTest\\menu.txt"
        #sMenu = open(MenuPath, 'r')

        #####위의 path들을 통해 메뉴들과 새로운 메뉴 존재여부를 받아옴
        menu, all, newcnt = fcn_methods.get_menus(allMenuPath, MenuPath)

        ############################################insert menu
        ######################################################################################
        ###################################################################################
        #food-plate모델의 클래스 순서는 background, 식판, 수저, food입니다
        menu2 = [0, 1, 2, 3]  ##########식판, 수저, food

        threshold = 0.6 ################예측 확률에 대한 threshold

        orig = fcn_methods.get_menuTF(output, menu, threshold)
        orig2 = fcn_methods.get_menuTF(output2, menu2, threshold)
        menulen = len(menu)
        menuarr = np.array([orig[0][menu[0]]])
        for j in range(1,menulen):
            menuarr = np.vstack((menuarr, np.array([orig[0][menu[j]]])))
        todayarr = np.argmax(menuarr, axis = 0)###########오늘의 메뉴 2차원 array
        ############################################################
        #print(todayarr.shape)
        #print(todayarr[200:220,600:620])
        ######################################################모델 클래스별 TF 들어있는 arr
        if newcnt > 0:
            fcn_methods.makeData(orig, orig2, name, menu, all)  ###############학습용 데이터 만들기

        ####################################################################################################
        orig = mx.nd.array(orig)
        orig2 = mx.nd.array(orig2)

        predict = mx.nd.squeeze(mx.nd.argmax(orig, 1)).asnumpy()
        predict2 = mx.nd.squeeze(mx.nd.argmax(orig2, 1)).asnumpy()
        ##############################################################################
        # Add color pallete for visualization
        from gluoncv.utils.viz import get_color_pallete
        import matplotlib.image as mpimg
        mask = get_color_pallete(predict, 'pascal_voc')
        mask2 = get_color_pallete(predict2, 'pascal_voc')

        ##########################필수#############################
        ######원본 사진과 predict 결과 사진의 저장 경로
        resultPath = "C:\\Users\\com\\PycharmProjects\\untitled\\test\\auto_test\\result\\"

        mask.save(resultPath + name.replace('jpg', 'png'))
        #mask2.save(resultPath + '2_'+name.replace('jpg', 'png'))

        #imgsave = mx.nd.array(imgsave).asnumpy()
        #mask =mx.nd.array(mask).asnumpy()

        imgsave = cv2.imread(pathdir + '\\' + name)
        mask = cv2.imread(resultPath + name.replace('jpg', 'png'))
        addh = cv2.hconcat([imgsave, mask])
        cv2.imwrite(resultPath+'concat_'+name.replace('jpg','png'), addh)

        ##############################################################################
        # show the predicted mask
        #mmask = mpimg.imread('output.png')
        #mmask2 = mpimg.imread('output2.png')
        #plt.imshow(mmask)
        #plt.show()
        #plt.imshow(mmask2)
        #plt.show()


########################################################################################
###특정 폴더에서의 변화를 감지하여 jpg파일이 생성되었을 때 predict를 실행.
import time
from watchdogs.observers import Observer
from watchdogs.events import FileSystemEventHandler

class EventHandler(FileSystemEventHandler):
    def on_any_event(self, event):
        print("EVENT")
        print(event.event_type)
        print(event.src_path)
        if event.event_type == 'created' and '.jpg' in event.src_path:
            modelPredict(event.src_path.replace(path+"\\", ""), path)
        print()

if __name__ == "__main__":
    ##########################필수#############################
    ###변화 감지할 폴더 경로
    path = "C:\\Users\\com\\PycharmProjects\\untitled\\test\\auto_test\\newTest"

    event_handler = EventHandler()
    observer = Observer()
    observer.schedule(event_handler, path, recursive = True)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()



'''
for name in filelist:
    if ".jpg" in name:
        img = image.imread(pathdir+'\\'+name)
        img = image.imresize(img,1280,720)

        from matplotlib import pyplot as plt
        #plt.imshow(img.asnumpy())
        #plt.show()

##############################################################################
# normalize the image using dataset mean
        transform_fn = transforms.Compose([
            transforms.ToTensor(),
            transforms.Normalize([.485, .456, .406], [.229, .224, .225])
        ])
        img = transform_fn(img)
        img = img.expand_dims(0).as_in_context(ctx)


##############################################################################
# Load the pre-trained model and make prediction
# ----------------------------------------------
#
# get pre-trained model


##############################################################################
# make prediction using single scale
        output = model.demo(img)
        output2 = model2.demo(img)
        allMenuPath = "C:\\Users\\com\\PycharmProjects\\untitled\\test\\newTest\\class_names.txt"
        allMenu = open(allMenuPath, 'r')
        MenuPath = "C:\\Users\\com\\PycharmProjects\\untitled\\test\\newTest\\menu.txt"
        sMenu = open(MenuPath, 'r')
        menu,all, newcnt = fcn_methods.get_menus(allMenuPath, MenuPath)


############################################insert menu
######################################################################################
        menu2 = [0,1,2,3]##########식판, 수저, food
        threshold = 0.9
        orig = fcn_methods.get_menuTF(output, menu, threshold)
        orig2 = fcn_methods.get_menuTF(output2, menu2, threshold)
######################################################모델 클래스별 TF 들어있는 arr
        if newcnt>0:
            fcn_methods.makeData(orig, orig2, name, menu, all)###############g학습용 데이터 만들기


####################################################################################################
        orig = mx.nd.array(orig)
        orig2 = mx.nd.array(orig2)

        predict = mx.nd.squeeze(mx.nd.argmax(orig, 1)).asnumpy()
        predict2 = mx.nd.squeeze(mx.nd.argmax(orig2, 1)).asnumpy()
##############################################################################
# Add color pallete for visualization
        from gluoncv.utils.viz import get_color_pallete
        import matplotlib.image as mpimg
        mask = get_color_pallete(predict, 'pascal_voc')
        mask2 = get_color_pallete(predict2, 'pascal_voc')

        mask.save('output.png')
        mask2.save('output2.png')


##############################################################################
# show the predicted mask
        mmask = mpimg.imread('output.png')
        mmask2 = mpimg.imread('output2.png')

#mmask2 = mpimg.imread('output2.png')######
        #plt.imshow(mmask)
        #plt.show()
        #plt.imshow(mmask2)
        #plt.show()
'''
